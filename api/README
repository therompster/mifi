# IFi Financial Literacy App - MySQL Backend API

This is the Flask backend API for the IFi Financial Literacy App, providing endpoints for user management, transactions, budgeting, savings goals, and bank account integration via Plaid. This implementation uses MySQL/MariaDB for the database.

## Setup Instructions

### Prerequisites
- Python 3.8 or higher
- pip (Python package manager)
- MySQL or MariaDB database server
- Plaid Developer Account (for the Plaid API)

### Database Setup

1. Install MySQL/MariaDB if you haven't already
```bash
# On Ubuntu
sudo apt-get update
sudo apt-get install mysql-server

# On macOS with Homebrew
brew install mysql
```

2. Run the database setup script to create the database and user
```bash
# Make the script executable
chmod +x setup_mysql.sh

# Run the script
./setup_mysql.sh
```

Alternatively, you can manually create the database and user:
```bash
sudo mysql -u root -p
```

```sql
CREATE DATABASE ifi_finance;
CREATE USER 'ifi_user'@'localhost' IDENTIFIED BY 'ifi_password';
GRANT ALL PRIVILEGES ON ifi_finance.* TO 'ifi_user'@'localhost';
FLUSH PRIVILEGES;
EXIT;
```

### Plaid Setup

1. Create a Plaid developer account at [https://dashboard.plaid.com/signup](https://dashboard.plaid.com/signup)
2. Create a new Plaid application in the dashboard
3. Get your client ID and secret keys

### Installation

1. Clone this repository
```bash
git clone <repository-url>
cd ifi-backend
```

2. Create a virtual environment (recommended)
```bash
python -m venv venv

# Activate the virtual environment
# On Windows:
venv\Scripts\activate
# On macOS/Linux:
source venv/bin/activate
```

3. Install dependencies
```bash
pip install -r requirements.txt
```

4. Create a .env file with your configuration
```bash
cp .env.template .env
```

5. Edit the .env file with your Plaid API keys and database credentials
```
# Database Configuration
DB_USER=ifi_user
DB_PASSWORD=ifi_password
DB_HOST=localhost
DB_NAME=ifi_finance

# JWT Secret
SECRET_KEY=your_secret_key_here

# Plaid API Credentials
PLAID_CLIENT_ID=your_plaid_client_id
PLAID_SECRET=your_plaid_sandbox_secret
PLAID_ENV=sandbox
```

6. Run the application
```bash
python app.py
```

The API will be available at http://localhost:5000

## API Endpoints

### Authentication
- POST `/api/register` - Register a new user
- POST `/api/login` - Login and receive a JWT token
- POST `/api/reset-password` - Request a password reset
- POST `/api/new-password` - Set a new password with a reset token

### Transactions
- GET `/api/transactions` - Get all transactions for the authenticated user
- POST `/api/transactions` - Add a new transaction

### Subscriptions
- GET `/api/subscriptions` - Get all subscriptions for the authenticated user
- POST `/api/subscriptions` - Add a new subscription

### Budget
- GET `/api/budget` - Get all budget categories for the authenticated user
- PUT `/api/budget` - Update a budget category

### Savings Goals
- GET `/api/goals` - Get all savings goals for the authenticated user
- PUT `/api/goals` - Update a savings goal

### User Profile
- GET `/api/profile` - Get the authenticated user's profile
- PUT `/api/profile` - Update the authenticated user's profile

### Plaid Integration
- GET `/api/plaid/create_link_token` - Create a Plaid Link token for connecting bank accounts
- POST `/api/plaid/exchange_public_token` - Exchange a public token for an access token and save bank account
- GET `/api/plaid/accounts` - Get all connected bank accounts for the user
- POST `/api/plaid/transactions/refresh` - Refresh transactions for all connected accounts
- GET `/api/plaid/spending_by_category` - Get spending data grouped by category

## Authentication

All API endpoints except for registration, login, and password reset require a valid JWT token. The token should be included in the Authorization header of requests as follows:

```
Authorization: Bearer <token>
```

## Integration with Frontend

To connect this backend with the React frontend:

1. Ensure the backend is running on port 5000
2. Configure the frontend to send API requests to `http://localhost:5000/api/...`
3. Store and include the JWT token in requests as needed
4. Install the necessary npm packages for Plaid integration:
   ```bash
   npm install react-plaid-link axios
   ```
5. Use the provided React components for Plaid integration

## Troubleshooting

### Database Connection Issues
- Verify your MySQL/MariaDB server is running
- Check the database credentials in your .env file
- Ensure the database and user exist with proper permissions

### Plaid Integration Issues
- Verify your Plaid API keys are correct in your .env file
- Ensure you're using the correct Plaid environment (sandbox, development, production)
- Check that your Plaid application is properly configured

## Security Considerations

This application uses JWT for authentication, but for a production environment you should consider:

1. Using HTTPS for all communications
2. Implementing IP-based rate limiting
3. Adding additional security headers
4. Setting up proper database backups
5. Securing your MySQL/MariaDB installation
